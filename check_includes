#!/usr/bin/perl

use strict;
use warnings;

use File::Slurp;
use File::Basename;
use Cwd qw(realpath);
use lib dirname($0);

use Pplight;

my $abs_path = realpath('.');
my @system_include_dirs;
my @angle_include_dirs;
my @quote_include_dirs;
my @cmdline_includes;
my @cmdline_defines;
my $linux;
my $nostdinc;
my $trigraphs;
my $cident_path;
my @cident_opts;
my $cident_redirect = '';
my $help;
my $skip_msg_once = 1;
my $require_include_guard = 1;
my $show_used = 0;

# Some header files should be ignored for one reason or other; we add
# them here.
my %linux_blacklist = map {$_ => 1}
    qw(
     );

my @ident_classes = get_ident_classes();

# We need to know which directories to search for header files, so we
# need to accept and parse -I and friends. But we also need to pass
# this information on to cident (or rather, the sparse library), since
# sparse will also need to know the include paths, in order to do
# proper preprocessing (we want DECLARE_BITMAP(name, 123) to be
# expanded so that we see the declaration of name).
#
# Unfortunately, the traditional cc options are rather heterogenous
# and non-standard, so using Getopt::Long is not completely
# straight-forward. It seems simplest to just implement our own option
# parser. Sigh...


@ARGV = parse_options(@ARGV);

sub parse_options {
    my @ret;

    # This eliminates some code duplication
    my %include_arrays = ( I => \@angle_include_dirs,
			   iquote => \@quote_include_dirs,
			   isystem => \@system_include_dirs );

    while (@_) {
	my $arg = shift;

	if ($arg =~ /^--linux(?:=(.+))?/) {
	    # --linux[=arch] is a shorthand for a bunch of other
	    # options. Also, it turns on a few heuristics which
	    # hopefully reduce the number of false positives.
	    my $arch = $1 // 'x86';
	    my $sysdir = qx(cc -print-file-name=include);
	    if (defined $sysdir) {
		chomp($sysdir);
		unshift @_, "-isystem", $sysdir;
	    }
	    unshift @_,
		("-nostdinc",
		 "-Iarch/${arch}/include",
		 "-Iarch/${arch}/include/generated",
		 "-Iinclude",
		 "-Iarch/${arch}/include/uapi",
		 "-Iarch/${arch}/include/generated/uapi",
		 "-Iinclude/uapi",
		 "-Iinclude/generated/uapi",
		 "-include", "./include/linux/kconfig.h",
		 "-D__KERNEL__",
		);
	    $linux = 1;
	    next;
	}

	if ($arg =~ /^-(I|iquote|isystem)(.*)/) {
	    my $dir = $2;
	    if ($dir eq '') {
		$dir = shift or die "missing argument to $1";
	    }
	    push @{$include_arrays{$1}}, $dir;
	    next;
	}

	if ($arg =~ /^-include(.*)/) {
	    my $file = $1;
	    if ($file eq '') {
		$file = shift or die "missing argument to -include"
	    }
	    push @cmdline_includes, $file;
	    next;
	}

	if ($arg =~ /^-D(.*)/) {
	    my $def = $1;
	    if ($def eq '') {
		$def = shift or die "missing argument to -D";
	    }
	    push @cmdline_defines, $def;
	    next;
	}


	if ($arg =~ /^-nostdinc/) {
	    $nostdinc = 1;
	    next;
	}
	if ($arg =~ /^-trigraphs/) {
	    $trigraphs = 1;
	    next;
	}

	if ($arg =~ /^--cident-path(?:=(.+))?/) {
	    my $path = $1;
	    if (not defined $path) {
		$path = shift or die "missing argument to --cident-path";
	    }
	    $cident_path = $path;
	    next;
	}
	if ($arg =~ /^--cident-stderr(?:=(.+))?/) {
	    my $file = $1;
	    if (not defined $file) {
		$file = shift or die "missing argument to --cident-stderr";
	    }
	    $cident_redirect = "2>> $file";
	    next;
	}
	if ($arg =~ /^--show-used/) {
	    $show_used = 1;
	    next;
	}

	if ($arg =~ /^-/) {
	    die "unknown option $arg";
	}

	push @ret, $arg;
    }

    return @ret;
}


if (not $nostdinc) {
    push @system_include_dirs, get_default_search_path();
}
if (not $linux) {
    push @cmdline_defines, '__STDC_HOSTED__';
}

if (not defined $cident_path) {
    $cident_path = dirname($0) . '/cident';
}

push @cident_opts, '-nostdinc' if $nostdinc;
push @cident_opts, '-trigraphs' if $trigraphs;
push @cident_opts, map { ('-isystem', $_) } @system_include_dirs;
push @cident_opts, map { ('-iquote', $_) } @quote_include_dirs;
push @cident_opts, map { ('-I', $_) } @angle_include_dirs;
push @cident_opts, map { ('-include', $_) } @cmdline_includes;
push @cident_opts, map { ("-D$_") } @cmdline_defines;


# We don't distinguish system headers from other angle include dirs,
# so concatenate the lists once we've built the options for cident.
push @angle_include_dirs, @system_include_dirs;




my $current_file;
my %angle_parsed_header; # <foo/bar.h> => result of lookup+parse of foo/bar.h
my %quote_parsed_header; # key = dir of currentfile, value is hashref similar to angle_parsed_header.

fake_std_headers();

do_source_file($_) for (@ARGV);

if ($skip_msg_once) {
    for my $h (sort keys %angle_parsed_header) {
	printf STDERR "skipped <%s> (%d times): %s\n",
	    $h, $angle_parsed_header{$h}{skipcount}, $angle_parsed_header{$h}{skip}
		if $angle_parsed_header{$h}{skip};
    }

    for my $d (sort keys %quote_parsed_header) {
	for my $h (sort keys %{$quote_parsed_header{$d}}) {
	    printf STDERR "%s/: skipped \"%s\" (%d times): %s\n",
		$d, $h, $quote_parsed_header{$d}{$h}{skipcount}, $quote_parsed_header{$d}{$h}{skip}
		    if $quote_parsed_header{$d}{$h}{skip};
	}
    }
}

sub skip_header {
    my $reason = shift;
    return { skip => $reason, skipcount => 0 };
}

sub do_source_file {
    my $filename = shift;
    $current_file = $filename;

    my $src = Pplight->file($filename);
    if (not defined $src) {
	printf STDERR "reading %s failed: $!\n", $filename;
	return;
    }
    my $src2 = "$src";
    $src2 =~ s{^[ \t]*#[ \t]*include[ \t]+([<"])(.*)[>"].*\n}{}gm;

    # Now look for #includes, and for each try to parse the header.
    while ($src =~ m{^[ \t]*#[ \t]*include[ \t]+([<"])(.*)[>"]}gm) {
	my $angle_quote = $1;
	my $hpath = $2;
	next if ($linux && exists $linux_blacklist{$hpath});
	# Included .c files are usually auto-generated, and only used from very few files.
	next unless $hpath =~ m/\.h$/;
	my $h = ($angle_quote eq '<') ? get_angle_header($hpath) : get_quote_header($hpath);
	if ($h->{skip}) {
	    if ($skip_msg_once) {
		$h->{skipcount}++;
	    } else {
		printf STDERR "%s: skipping %s: %s\n", $filename, $hpath, $h->{skip};
	    }
	    next;
	}
	my $usecount = 0;
	my %used;

	# object-like macros, typedefs, extern vars, enum constants
	# and extern functions just need to be present as words to be
	# considered used (the latter because their address may be
	# taken, and unary & is not even required for that).
	for my $class (qw(obj_macro typedef extern_var enum_cst extern_func)) {
	    for my $id (@{$h->{$class}}) {
		if ($src2 =~ m/\b$id\b/) {
		    ++$usecount;
		    push @{$used{$class}}, $id;
		}
	    }
	}

	# A function-like macro must be followed by an opening
	# parenthesis. While probably not strictly required for static
	# inlines, we require the same of those.
	for my $class (qw(fun_macro inline_func)) {
	    for my $id (@{$h->{$class}}) {
		if ($src2 =~ m/\b$id\s*\(/) {
		    ++$usecount;
		    push @{$used{$class}}, $id;
		}
	    }
	}

	# A struct, union or enum tag can only be used by preceding it
	# by the corresponding keyword. We are only interested in
	# definitions, not declarations. This doesn't necessarily mean
	# that the TU actually needs a definition of the struct (it
	# might only deal with pointers to it and never need to know
	# its members or size).
	for my $kw (qw(struct union enum)) {
	    for my $id (@{$h->{"${kw}_def"}}) {
		if ($src2 =~ m/\b$kw\s+$id\b/) {
		    ++$usecount;
		    push @{$used{"${kw}_def"}}, $id;
		}
	    }
	}

	if ($usecount == 0) {
	    printf "%s\t%s\t(redundant)\n", $filename, $hpath;
	} elsif ($show_used) {
	    for my $class (@ident_classes) {
		for my $id (@{$used{$class}}) {
		    printf "%s\t%s\t%s (%s)\n", $filename, $hpath, $id, $class;
		}
	    }
	}
    }

}



sub get_angle_header {
    my $path = shift;

    return $angle_parsed_header{$path}
	if exists $angle_parsed_header{$path};

    for my $dir (@angle_include_dirs) {
	if (-e "${dir}/${path}") {
	    $angle_parsed_header{$path} = parse_header("${dir}/${path}");
	    return $angle_parsed_header{$path};
	}
    }

    $angle_parsed_header{$path} = skip_header("not found");
    return $angle_parsed_header{$path};
}

sub get_quote_header {
    my $path = shift;
    my $curdir = dirname($current_file);
    $curdir = realpath($curdir);
    $curdir =~ s/^$abs_path/./;
    return $quote_parsed_header{$curdir}{$path}
	if (exists $quote_parsed_header{$curdir}{$path});

    for my $dir ($curdir, @quote_include_dirs, @angle_include_dirs) {
	if (-e "${dir}/${path}") {
	    $quote_parsed_header{$curdir}{$path} = parse_header("${dir}/${path}");
	    return $quote_parsed_header{$curdir}{$path};
	}
    }

    $quote_parsed_header{$curdir}{$path} = skip_header("not found");
    return $quote_parsed_header{$curdir}{$path};
}

sub parse_header {
    my $path = shift;
    my $path_bn = basename($path);
    my $src = Pplight->file($path);

    if (not defined $src) {
	return skip_header("reading $path failed: $!");
    }
    if ($require_include_guard && not defined $src->include_guard()) {
	return skip_header("no include guard");
    }

    # If this is a wrapper around one or more other headers, we tell
    # cident to report global identifiers from all files, not just the
    # one we're handling. We then include the symbols from the
    # directly included files.
    #
    # We do the same for all (possibly recursively) included files
    # with the same basename as $path. Unconditionally letting cident
    # spit out all global identifiers is waaay too slow, though, so we
    # insist that $path directly includes at least one file with the
    # same basename for this to trigger.

    my $is_wrapper = is_wrapper($src);
    my @angle_includes = ($src =~ m/^\s*#\s*include\s+<([^<>]+)>.*$/mg);
    my $includes_same_basename = any(map {basename($_) eq $path_bn} @angle_includes);

    $ENV{"CIDENT_all_files"} = ($is_wrapper || $includes_same_basename) ? 1 : 0;
    my @lines = qx($cident_path @cident_opts $path $cident_redirect);
    if ($? == -1) {
	return skip_header("invoking cident failed");
    } elsif ($?) {
	return skip_header(sprintf("cident exited with non-zero status %d", $? >> 8));
    }

    my $h = { map { $_ => [] } @ident_classes };

    if ($is_wrapper || $includes_same_basename) {
	for (@lines) {
	    chomp;
	    my ($loc, $class, $ident) = split;
	    if (not exists $h->{$class}) {
		printf STDERR "unknown identifier class %s at %s\n", $class, $loc;
		next;
	    }
	    my ($file, $line) = split /:/, $loc;
	    if ($file eq $path
		|| basename($file) eq $path_bn
		|| ($is_wrapper && ends_with_any($file, \@angle_includes))
		|| ($path_bn eq 'errno.h' && basename($file) eq 'errno-base.h')
		|| ($path_bn eq 'types.h' && basename($file) eq 'int-ll64.h')
		|| ($path_bn eq 'string.h' && basename($file) =~ m/string_(?:32|64)\.h/)
	       ) {
		push @{$h->{$class}}, $ident;
	    }
	}
    } else {
	for (@lines) {
	    chomp;
	    my ($loc, $class, $ident) = split;
	    if (not exists $h->{$class}) {
		printf STDERR "unknown identifier class %s at %s\n", $class, $loc;
		next;
	    }
	    push @{$h->{$class}}, $ident;
	}
    }

    remove_duplicates($h);

    return $h;
}

sub is_wrapper {
    # A "wrapper" means a header file which consists only of
    # angle-include directives (at least one), and maybe an include
    # guard.
    my ($src) = @_;
    return ($src =~ m/^ # Anchor the match
			(?:
			    \s*\#\s*ifndef\s+([_A-Za-z][_A-Za-z0-9]*).*\n
			    \s*\#\s*define\s+\1\b.*\n
			|
			    \s*\#\s*if\s+!\s*defined\s*\(\s*([_A-Za-z][_A-Za-z0-9]*)\s*\).*\n
			    \s*\#\s*define\s+\2\b.*\n
			)? # optionally an include guard
			(?:
			    \s*\#\s*include\s+<[^<>]+>.*\n
			)+ # one ore more angle include directives
			(?:
			    \s*\#\s*endif\s*
			)? # Closing include guard
			$
		     /x);
}


sub ends_with_any {
    my ($str, $aref) = @_;
    for (@$aref) {
	return 1 if ($str =~ m#(^|/)$_$#);
    }
    return 0;
}


sub remove_duplicates {
    my ($h) = @_;
    for my $class (@ident_classes) {
	my %k = map {$_ => 1} @{$h->{$class}};
	@{$h->{$class}} = sort keys %k;
    }
}


sub get_ident_classes {
    my $dir = dirname($0);
    my @classes = ();
    my @lines = read_file("${dir}/ident_classes.h");
    for (@lines) {
	push @classes, $1 if m/^\s*ID_CLASS\(\s*[A-Z_]+\s*,\s*([a-zA-Z_]+)\s*\)/;
    }
    return @classes;
}

sub get_default_search_path {
    my @lines = qx{cpp -Wp,-v < /dev/null 2>&1 > /dev/null};
    my $found = 0;
    my @ret = ();
    for (@lines) {
	chomp;
	$found = 1 if (not $found && $_ eq '#include <...> search starts here:');
	push @ret, $1 if ($found && m#^ (/.*)$#);
	$found = 0 if ($found && $_ eq 'End of search list.');
    }
    push @ret, qw(/usr/local/include /usr/include) if (@ret == 0);
    return @ret;
}

sub any { $_ && return 1 for @_; 0 }

sub fake_std_headers {
    $angle_parsed_header{"stdarg.h"} =
	{ typedef => [qw(va_list)], fun_macro => [qw(va_start va_arg va_end va_copy)]};
    $angle_parsed_header{"stddef.h"} =
	{ obj_macro => [qw(NULL)], fun_macro => [qw(offsetof)], typedef => [qw(ptrdiff_t size_t)]};
}
